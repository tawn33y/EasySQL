<?php

/*
 *--------------------------------------------------------------------------------------------------------------------------
 * EasySQL v1.0.0 (https://tawn33y.github.io/EasySQL) | (c) 2016-2017 K Tony (https://tawn33y.github.io) | License: MIT
 *--------------------------------------------------------------------------------------------------------------------------
 */

trait files{protected function read_file($path){if(!file_exists($path)){$this->throw_error("ES801","File error: File does not exist");}if(!is_readable($path)){$this->throw_error("ES802","File error: Permission denied");}$content=file_get_contents($path);if(empty($content)){$this->throw_error("ES803","File error: File is empty");}return $content;}protected function write_to_file($path,$content){if(!file_exists($path)){$this->throw_error("ES801","File error: File does not exist.");}if(!is_writable($path)){$this->throw_error("ES802","File error: Permission denied");}$file=fopen($path,"w");fwrite($file,$content);fclose($file);unset($file);return $this->std_output();}protected function append_to_json_file($path,$json_content,$auto_id=true,$minify_json){if(!file_exists($path)){$this->throw_error("ES801","File error: File does not exist");}if(!is_writable($path)){$this->throw_error("ES802","File error: Permission denied");}$file_content_json=file_get_contents($path);$file_content_array=json_decode($file_content_json,true);if($auto_id){if(empty($file_content_array)){$new_id=0;}else{$array_keys=array_keys($file_content_array);$new_id=end($array_keys)+1;}$json_content=json_decode($json_content,true);$json_content=["id"=>$new_id] + $json_content;}$file_content_array[]=$json_content;$file_content_json=$minify_json?json_encode($file_content_array):json_encode($file_content_array,JSON_PRETTY_PRINT);try{file_put_contents($path,$file_content_json,LOCK_EX);}catch(Exception $e){$this->throw_error("ES805","File error: Writing to file failed");}return true;}}trait misc{protected function std_output($data_content=null,$error_content=null,$server_error=false){$backtrace=debug_backtrace();$output=empty($error_content)?[ "code"=>http_response_code(),"status"=>"success","data"=>$data_content ]:[ "code"=>http_response_code(),"status"=>($server_error?"error":"fail"),"error"=>[ "code"=>is_array($error_content)?$error_content["code"]:$error_content->getCode(),"message"=>is_array($error_content)?$error_content["message"]:$error_content->getMessage()] ];if($this->get_backtrace_enable()&&!empty($error_content)){$output["backtrace"]=end($backtrace);}return json_encode($output,JSON_PRETTY_PRINT);}protected function throw_error($code,$error_message){$error_content=[ "code"=>$code,"message"=>$error_message ];throw new Exception($this->std_output(null,$error_content));}protected function throw_error_from_error_object($error_object){$error_array=json_decode($error_object->getMessage(),true);throw new Exception(json_encode($error_array,JSON_PRETTY_PRINT));}public function process_output($json_content){$json_content=json_decode($json_content,true);if($json_content["status"]!=="success"){throw new Exception(json_encode($json_content,JSON_PRETTY_PRINT));}return $json_content["data"];}protected function json_to_array($json_string){$json_array=json_decode($json_string,true);if(empty($json_array)||!is_array($json_array)){$this->throw_error("ES721","Syntax error: The file or input does not contain valid JSON");}return $json_array;}public function pretty_print($array){echo "<pre>";print_r($array);echo "</pre>";}}trait args_validations{public function validate_arg_isset($arg,$arg_position,$function){if(empty($arg)){$this->throw_error("ES711","Syntax error: Missing argument {$arg_position} for {$function}");}return true;}public function validate_arg_is_string($arg,$arg_position,$function){if(gettype($arg)!=="string"){$this->throw_error("ES712","Syntax error: Expects argument {$arg_position} for {$function} to be a string");}return true;}public function validate_arg_is_boolean($arg,$arg_position,$function){if(gettype($arg)!=="boolean"){$this->throw_error("ES713","Syntax error: Expects argument {$arg_position} for {$function} to be boolean");}return true;}public function validate_arg_is_array($arg,$arg_position,$function){if(!is_array($arg)){$this->throw_error("ES714","Syntax error: Expects argument {$arg_position} for {$function} to be an array");}return true;}public function validate_arg_is_string_iff_isset($arg,$arg_position,$function){if(!empty($arg)){try{$this->validate_arg_is_string($arg,$arg_position,$function);}catch(Exception $e){$this->throw_error_from_error_object($e);}}return true;}public function validate_arg_is_array_iff_isset($arg,$arg_position,$function){if(!empty($arg)){try{$this->validate_arg_is_array($arg,$arg_position,$function);}catch(Exception $e){$this->throw_error_from_error_object($e);}}return true;}public function validate_arg_array_has_required_number_of_keys($arg,$arg_position,$function,$expected_num_keys){if(!empty($arg)&&count($arg)>$expected_num_keys){$error_msg="Syntax error: More than {$expected_num_keys} value passed in argument {$arg_position} for {$function}";$this->throw_error("ES715",$error_msg);}return true;}}trait args_formatting{protected function convert_array_to_string($array,$imploder,$use_quotes=true){if(!empty($array)){$temp=[];foreach($array as $key=>$value){$temp[]=$use_quotes?"`{$key}` = '{$value}'":"`{$key}` {$value}";}$string=implode($imploder,$temp);}else{$string=null;}return $string;}}abstract class init{protected $backtrace_enable=true;use files;use misc;use args_validations;use args_formatting;protected function __destruct(){$this->backtrace_enable=null;return true;}public function set_backtrace_enable($new_backtrace_enable){try{init::validate_arg_is_boolean($new_backtrace_enable,1,"set_backtrace_enable()");}catch(Exception $e){init::throw_error_from_error_object($e);}$this->backtrace_enable=$new_backtrace_enable;return true;}public function get_backtrace_enable(){return $this->backtrace_enable;}}abstract class credentials extends init{protected $database_type;protected $host_name;protected $host_username;protected $host_password;protected $database;protected function __destruct(){$this->database_type=null;$this->host_name=null;$this->host_username=null;$this->host_password=null;$this->database=null;return true;}public function set_database_type($new_database_type){$this->database_type=$new_database_type;return true;}public function get_database_type(){return $this->database_type;}public function set_host_name($new_host_name){$this->host_name=$new_host_name;return true;}public function get_host_name(){return $this->host_name;}public function set_host_username($new_host_username){$this->host_username=$new_host_username;return true;}public function get_host_username(){return $this->host_username;}public function set_host_password($new_host_password){$this->host_password=$new_host_password;return true;}public function get_host_password(){return $this->host_password;}public function set_database($new_database){$this->database=$new_database;return true;}public function get_database(){return $this->database;}public function set_credentials($new_database_type=null,$new_host_name=null,$new_host_username=null,$new_host_password=null,$new_database=null){try{credentials::validate_credentials_args($new_database_type,$new_host_name,$new_host_username,$new_database);}catch(Exception $e){init::throw_error_from_error_object($e);}credentials::set_database_type($new_database_type);credentials::set_host_name($new_host_name);credentials::set_host_username($new_host_username);credentials::set_host_password($new_host_password);credentials::set_database($new_database);return true;}public function set_credentials_via_json_file($path){try{$credentials=init::read_file($path);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$credentials=init::json_to_array($credentials);}catch(Exception $e){init::throw_error_from_error_object($e);}try{credentials::validate_isset_credentials($credentials);}catch(Exception $e){init::throw_error_from_error_object($e);}credentials::set_credentials($credentials["database_type"],$credentials["host_name"],$credentials["host_username"],$credentials["host_password"],$credentials["database"]);return init::std_output();}public function get_credentials(){return [ "database_type"=>credentials::get_database_type(),"host_name"=>credentials::get_host_name(),"host_username"=>credentials::get_host_username(),"host_password"=>credentials::get_host_password(),"database"=>credentials::get_database()];}protected function validate_isset_credentials($credentials=null){$isset_credentials=true;$expected_credentials=["database_type","host_name","host_username","database"];$missing_credentials=[];foreach($expected_credentials as $key=>$value){if(empty($credentials)){$temp="get_{$value}";if(empty(credentials::$temp())){$isset_credentials=false;$missing_credentials[]=$value;}}else{if(!array_key_exists($value,$credentials)){$isset_credentials=false;$missing_credentials[]=$value;}else{if(empty($credentials[$value])&&$value!=="host_password"){$isset_credentials=false;$missing_credentials[]=$value;}}}}if(is_array($credentials)&&!array_key_exists("host_password",$credentials)){$isset_credentials=false;$missing_credentials[]="host_password";}if(!$isset_credentials){init::throw_error("ES701","Syntax error: Missing credentials for ".implode(', ',$missing_credentials));}return true;}protected function validate_credentials_args($new_database_type,$new_host_name,$new_host_username,$new_database){try{init::validate_arg_isset($new_database_type,1,"set_credentials()");}catch(Exception $e){init::throw_error_from_error_object($e);}try{init::validate_arg_is_string($new_database_type,1,"set_credentials()");}catch(Exception $e){init::throw_error_from_error_object($e);}try{init::validate_arg_isset($new_host_name,2,"set_credentials()");}catch(Exception $e){init::throw_error_from_error_object($e);}try{init::validate_arg_isset($new_host_username,3,"set_credentials()");}catch(Exception $e){init::throw_error_from_error_object($e);}try{init::validate_arg_isset($new_database,5,"set_credentials()");}catch(Exception $e){init::throw_error_from_error_object($e);}return true;}}abstract class logs extends credentials{protected $logs_enable=false;protected $logs_file_path;protected $logs_minify=false;protected function __destruct(){$this->logs_enable=null;$this->logs_file_path=null;$this->log_minify=null;return true;}public function set_logs_enable($new_logs_enable){try{init::validate_arg_is_boolean($new_logs_enable,1,"set_logs_enable()");}catch(Exception $e){init::throw_error_from_error_object($e);}$this->logs_enable=$new_logs_enable;return true;}public function get_logs_enable(){return $this->logs_enable;}public function set_logs_file_path($new_logs_file_path){if(!empty($new_logs_file_path)){logs::set_logs_enable(true);$this->logs_file_path=$new_logs_file_path;}return true;}public function get_logs_file_path(){return $this->logs_file_path;}public function set_logs_minify($new_logs_minify){try{init::validate_arg_is_boolean($new_logs_minify,1,"set_logs_minify()");}catch(Exception $e){init::throw_error_from_error_object($e);}$this->logs_minify=$new_logs_minify;return true;}public function get_logs_minify(){return $this->logs_minify;}protected function create_error_log($error_content){$path=logs::get_logs_file_path();if(empty($path)){init::throw_error("ES804","Syntax error: Log file path not set.");}$logs_minify=logs::get_logs_minify();$log_array=[ "timestamp"=>time(),"log"=>json_decode($error_content,true),];$log_json=json_encode($log_array,JSON_PRETTY_PRINT);try{init::append_to_json_file($path,$log_json,true,$logs_minify);}catch(Exception $e){init::throw_error_from_error_object($e);}return true;}public function get_logs(){$path=logs::get_logs_file_path();if(empty($path)){init::throw_error("ES804","Syntax error: Log file path not set.");}try{$logs_json=init::read_file($path);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$logs_array=init::json_to_array($logs_json);}catch(Exception $e){init::throw_error_from_error_object($e);}return init::std_output($logs_array);}public function clear_logs(){$path=logs::get_logs_file_path();if(empty($path)){init::throw_error("ES804","Syntax error: Log file path not set.");}try{init::write_to_file($path,null);}catch(Exception $e){init::throw_error_from_error_object($e);}return init::std_output();}}abstract class connection extends logs{protected $connection_object;protected function __destruct(){$this->connection_object=null;return true;}protected function set_connection_object($new_connection_object){$this->connection_object=$new_connection_object;return true;}protected function get_connection_object(){return $this->connection_object;}public function open_connection(){try{credentials::validate_isset_credentials();}catch(Exception $e){init::throw_error_from_error_object($e);}try{$conn=new PDO(credentials::get_database_type().": host=".credentials::get_host_name()."; dbname=".credentials::get_database().";",credentials::get_host_username(),credentials::get_host_password());$conn->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);connection::set_connection_object($conn);}catch(PDOException $e){init::throw_error("ES601",$e->getMessage());}return init::std_output();}public function close_connection(){$connection_object=connection::get_connection_object();connection::__destruct();unset($connection_object);return init::std_output();}}abstract class crud extends connection{protected $table;protected $data_1;protected $data_2;protected function __destruct(){$this->table=null;$this->data_1=null;$this->data_2=null;return true;}protected function set_table($new_table){$this->table=$new_table;return true;}protected function get_table(){return $this->table;}protected function set_data_1($new_data_1){$this->data_1=$new_data_1;return true;}protected function get_data_1(){return $this->data_1;}protected function set_data_2($new_data_2){$this->data_2=$new_data_2;return true;}protected function get_data_2(){return $this->data_2;}protected function set_crud($table,$new_data_1,$new_data_2=null){crud::set_table($table);crud::set_data_1($new_data_1);crud::set_data_2($new_data_2);return true;}protected function get_crud(){return [ "table"=>crud::get_table(),"data_1"=>crud::get_data_1(),"data_2"=>crud::get_data_2()];}protected function _read(){$return_data=[];try{connection::open_connection();$conn=connection::get_connection_object();}catch(Exception $e){init::throw_error_from_error_object($e);}try{$stmt=$conn->prepare("SELECT ".crud::get_data_1()." FROM `".crud::get_table()."` ".crud::get_data_2());$stmt->execute();$result=$stmt->setFetchMode(PDO::FETCH_ASSOC);foreach(new RecursiveArrayIterator($stmt->fetchAll())as $k=>$v){$return_data[]=$v;}connection::close_connection();}catch(PDOException $e){if(logs::get_logs_enable()){try{logs::create_error_log(init::std_output(null,$e));}catch(Exception $e){init::throw_error_from_error_object($e);}}connection::close_connection();init::throw_error("ES611",$e->getMessage());}return init::std_output($return_data);}protected function _create(){$return_data=[];try{connection::open_connection();$conn=connection::get_connection_object();}catch(Exception $e){init::throw_error_from_error_object($e);}try{$stmt=$conn->prepare("INSERT INTO `".crud::get_table()."` (".crud::get_data_1()['keys_formatted'].") VALUES (".crud::get_data_1()['params'].")");for($i=0;$i<count(crud::get_data_1()["keys"]);$i++){$stmt -> bindParam(crud::get_data_1()["keys"][$i],crud::get_data_1()["values"][$i]);}$stmt->execute();$return_data=["id"=>$conn->lastInsertId()];connection::close_connection();}catch(PDOException $e){if(logs::get_logs_enable()){try{logs::create_error_log(init::std_output(null,$e));}catch(Exception $e){init::throw_error_from_error_object($e);}}connection::close_connection();init::throw_error("ES612",$e->getMessage());}return init::std_output($return_data);}protected function _update(){try{connection::open_connection();$conn=connection::get_connection_object();}catch(Exception $e){init::throw_error_from_error_object($e);}try{$sql="UPDATE `".crud::get_table()."` SET ".crud::get_data_1()." ".crud::get_data_2();$stmt=$conn->prepare($sql);$stmt->execute();connection::close_connection();}catch(PDOException $e){if(logs::get_logs_enable()){try{logs::create_error_log(init::std_output(null,$e));}catch(Exception $e){init::throw_error_from_error_object($e);}}connection::close_connection();init::throw_error("ES613",$e->getMessage());}return init::std_output();}protected function _delete(){try{connection::open_connection();$conn=connection::get_connection_object();}catch(Exception $e){init::throw_error_from_error_object($e);}try{$sql="DELETE FROM `".crud::get_table()."` WHERE ".crud::get_data_1();$conn->exec($sql);connection::close_connection();}catch(PDOException $e){if(logs::get_logs_enable()){try{logs::create_error_log(init::std_output(null,$e));}catch(Exception $e){init::throw_error_from_error_object($e);}}init::close_connection();init::throw_error("ES614",$e->getMessage());}return init::std_output();}protected function _alter(){try{connection::open_connection();$conn=connection::get_connection_object();}catch(Exception $e){init::throw_error_from_error_object($e);}try{$stmt=$conn->prepare("ALTER TABLE `".crud::get_table()."` ".crud::get_data_1()." ".crud::get_data_2());$stmt->execute();connection::close_connection();}catch(PDOException $e){if(logs::get_logs_enable()){try{logs::create_error_log(init::std_output(null,$e));}catch(Exception $e){init::throw_error_from_error_object($e);}}connection::close_connection();init::throw_error("ES615",$e->getMessage());}return init::std_output();}}class easysql extends crud{public function __destruct(){init::__destruct();credentials::__destruct();logs::__destruct();connection::__destruct();crud::__destruct();return true;}public function select($table,$select_data=null,$select_query=null,$select_order=null){$prepare=new prepare_select();$prepare->set_method_name("select()");$prepare->set_backtrace_enable(init::get_backtrace_enable());try{$prepare->set_table($table);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_select_data($select_data);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_select_query($select_query);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_select_order($select_order);}catch(Exception $e){init::throw_error_from_error_object($e);}$table=$prepare->get_table();$select_data=$prepare->get_select_data();$select_query=$prepare->get_select_query();$select_order=$prepare->get_select_order();$prepare->__destruct();unset($prepare);crud::set_crud($table,$select_data,$select_query." ".$select_order);try{$result=crud::_read();}catch(Exception $e){init::throw_error_from_error_object($e);}return $result;}public function select2($table,$select_data=null,$select_query=null){$prepare=new prepare_select2();$prepare->set_method_name("select2()");try{$prepare->set_table($table);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_select_data($select_data);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_select_query($select_query);}catch(Exception $e){init::throw_error_from_error_object($e);}$table=$prepare->get_table();$select_data=$prepare->get_select_data();$select_query=$prepare->get_select_query();$prepare->__destruct();unset($prepare);crud::set_crud($table,$select_data,$select_query);try{$result=crud::_read();}catch(Exception $e){init::throw_error_from_error_object($e);}return $result;}public function insert($table,$insert_data=null){$prepare=new prepare_insert();$prepare->set_method_name("insert()");try{$prepare->set_table($table);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_insert_data($insert_data);}catch(Exception $e){init::throw_error_from_error_object($e);}$table=$prepare->get_table();$insert_data=$prepare->get_insert_data();$prepare->__destruct();unset($prepare);crud::set_crud($table,$insert_data);try{$result=crud::_create();}catch(Exception $e){init::throw_error_from_error_object($e);}return $result;}public function update($table,$update_data=null,$update_query=null){$prepare=new prepare_update();$prepare->set_method_name("update()");try{$prepare->set_table($table);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_update_data($update_data);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_update_query($update_query);}catch(Exception $e){init::throw_error_from_error_object($e);}$table=$prepare->get_table();$update_data=$prepare->get_update_data();$update_query=$prepare->get_update_query();$prepare->__destruct();unset($prepare);crud::set_crud($table,$update_data,$update_query);try{$result=crud::_update();}catch(Exception $e){init::throw_error_from_error_object($e);}return $result;}public function delete($table,$delete_data=null){$prepare=new prepare_delete();$prepare->set_method_name("delete()");try{$prepare->set_table($table);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_delete_data($delete_data);}catch(Exception $e){init::throw_error_from_error_object($e);}$table=$prepare->get_table();$delete_data=$prepare->get_delete_data();$prepare->__destruct();unset($prepare);crud::set_crud($table,$delete_data);try{$result=crud::_delete();}catch(Exception $e){init::throw_error_from_error_object($e);}return $result;}public function alter($table,$alter_operand,$alter_data){$prepare=new prepare_alter();$prepare->set_method_name("alter()");try{$prepare->set_table($table);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_alter_operand($alter_operand);}catch(Exception $e){init::throw_error_from_error_object($e);}try{$prepare->set_alter_data($alter_data);}catch(Exception $e){init::throw_error_from_error_object($e);}$table=$prepare->get_table();$alter_operand=$prepare->get_alter_operand();$alter_data=$prepare->get_alter_data();$prepare->__destruct();unset($prepare);crud::set_crud($table,$alter_operand,$alter_data);try{$result=crud::_alter();}catch(Exception $e){init::throw_error_from_error_object($e);}return $result;}}abstract class prepare_all_methods extends init{protected $table;protected $method_name;protected function __destruct(){init::__destruct();$this->table=null;$this->method_name=null;return true;}public function set_method_name($new_method_name){try{prepare_all_methods::validate_arg_isset($new_method_name,1,"set_method_name()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_is_string($new_method_name,1,"set_method_name()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->method_name=$new_method_name;return true;}public function get_method_name(){return $this->method_name;}public function set_table($new_table){try{prepare_all_methods::validate_arg_isset($new_table,1,prepare_all_methods::get_method_name());}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_is_string($new_table,1,prepare_all_methods::get_method_name());}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->table=$new_table;return true;}public function get_table(){return $this->table;}}class prepare_select extends prepare_all_methods{protected $select_data;protected $select_query;protected $select_order;public function __destruct(){prepare_all_methods::__destruct();$this->select_data=null;$this->select_query=null;$this->select_order=null;return true;}public function set_select_data($new_select_data){try{prepare_all_methods::validate_arg_isset($new_select_data,2,"select()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_is_array($new_select_data,2,"select()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->select_data=$new_select_data;return true;}public function get_select_data(){$select_data=$this->select_data;if(strpos($select_data[0],"(")){$select_data=implode(", ",$select_data);}else{$select_data="`".implode("`, `",$select_data)."`";}return $select_data;}public function set_select_query($new_select_query){try{prepare_all_methods::validate_arg_is_array_iff_isset($new_select_query,3,"select()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->select_query=$new_select_query;return true;}public function get_select_query(){$select_query=$this->select_query;$select_query=empty($select_query)?null:"WHERE ".prepare_all_methods::convert_array_to_string($select_query," && ");return $select_query;}public function set_select_order($new_select_order){try{prepare_all_methods::validate_arg_is_array_iff_isset($new_select_order,4,"select()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_array_has_required_number_of_keys($new_select_order,4,"select()",1);}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->select_order=$new_select_order;return true;}public function get_select_order(){$select_order=$this->select_order;$select_order=empty($select_order)?null:"ORDER BY ".prepare_all_methods::convert_array_to_string($select_order,"",false);return $select_order;}}class prepare_select2 extends prepare_select{public function set_select_query($new_select_query){try{prepare_all_methods::validate_arg_is_string_iff_isset($new_select_query,3,"select2()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->select_query=$new_select_query;return true;}public function get_select_query(){$select_query=$this->select_query;$select_query=empty($select_query)?null:$select_query;return $select_query;}}class prepare_insert extends prepare_all_methods{protected $insert_data;public function __destruct(){prepare_all_methods::__destruct();$this->insert_data=null;return true;}public function set_insert_data($new_insert_data){try{prepare_all_methods::validate_arg_isset($new_insert_data,2,"insert()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_is_array($new_insert_data,2,"insert()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->insert_data=$new_insert_data;return true;}public function get_insert_data(){$insert_data=$this->insert_data;$_insert_data=[];foreach($insert_data as $key=>$value){$_insert_data["keys"][]=$key;$_insert_data["values"][]=$value;$_insert_data["keys_formatted"][]="`{$key}`";$_insert_data["params"][]=':'.$key;}$_insert_data["keys_formatted"]=implode(", ",$_insert_data["keys_formatted"]);$_insert_data["params"]=implode(", ",$_insert_data["params"]);return $_insert_data;}}class prepare_update extends prepare_all_methods{protected $update_data;protected $update_query;public function __destruct(){prepare_all_methods::__destruct();$this->update_data=null;$this->update_query=null;return true;}public function set_update_data($new_update_data){try{prepare_all_methods::validate_arg_isset($new_update_data,2,"update()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_is_array($new_update_data,2,"update()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->update_data=$new_update_data;return true;}public function get_update_data(){$update_data=$this->update_data;$update_data=$this->convert_array_to_string($update_data,", ");return $update_data;}public function set_update_query($new_update_query){try{prepare_all_methods::validate_arg_isset($new_update_query,3,"update()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_is_array($new_update_query,3,"update()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->update_query=$new_update_query;return true;}public function get_update_query(){$update_query=$this->update_query;$update_query="WHERE ".$this->convert_array_to_string($update_query," && ");return $update_query;}}class prepare_delete extends prepare_all_methods{protected $delete_data;public function __destruct(){prepare_all_methods::__destruct();$this->delete_data=null;return true;}public function set_delete_data($new_delete_data){try{prepare_all_methods::validate_arg_isset($new_delete_data,2,"delete()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_is_array($new_delete_data,2,"delete()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_array_has_required_number_of_keys($new_delete_data,2,"delete()",1);}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->delete_data=$new_delete_data;return true;}public function get_delete_data(){$delete_data=$this->delete_data;$delete_data=$this->convert_array_to_string($delete_data,", ");return $delete_data;}}class prepare_alter extends prepare_all_methods{protected $alter_data;protected $alter_operand;public function __destruct(){prepare_all_methods::__destruct();$this->alter_data=null;$this->alter_operand=null;return true;}public function set_alter_operand($new_alter_operand){try{prepare_all_methods::validate_arg_isset($new_alter_operand,2,"alter()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_is_string($new_alter_operand,2,"alter()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}$this->alter_operand=$new_alter_operand;return true;}public function get_alter_operand(){$alter_operand=$this->alter_operand;return $alter_operand;}public function set_alter_data($new_alter_data){try{prepare_all_methods::validate_arg_isset($new_alter_data,3,"alter()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}if(is_array($new_alter_data)){try{prepare_all_methods::validate_arg_is_array($new_alter_data,3,"alter()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}try{prepare_all_methods::validate_arg_array_has_required_number_of_keys($new_alter_data,3,"alter()",1);}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}}else{try{prepare_all_methods::validate_arg_is_string($new_alter_data,3,"alter()");}catch(Exception $e){prepare_all_methods::throw_error_from_error_object($e);}}$this->alter_data=$new_alter_data;return true;}public function get_alter_data(){$alter_data=$this->alter_data;$alter_data=!is_array($alter_data)?$alter_data:$this->convert_array_to_string($alter_data,"",false);return $alter_data;}}?>
